{"version":3,"sources":["Card.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","name","password","Component","Form","inp1","document","getElementById","inp2","card","src_Card","value","form","console","log","innerHTML","concat","id","type","placeholder","required","onClick","printDetails","App","src_Form_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAiBeA,cAdX,SAAAA,EAAYC,GAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACTH,0EAGN,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,UAAKN,KAAKH,MAAMW,MAChBJ,EAAAC,EAAAC,cAAA,SAAIN,KAAKH,MAAMY,mBAThBC,aCqCJC,gMAjCP,IAAIC,EAAKC,SAASC,eAAe,QAC7BC,EAAOF,SAASC,eAAe,QAC/BE,EAAMZ,EAAAC,EAAAC,cAACW,EAAD,CACVT,KAAMI,EAAKM,MACXT,SAAWM,EAAKG,QACZC,EAAON,SAASC,eAAe,iBACnCM,QAAQC,IAAIL,GACZG,EAAKG,UAAL,YAAAC,OAA6BP,EAAKnB,MAAMW,KAAxC,6BAAAe,OACYP,EAAKnB,MAAMY,SADvB,yCAMJ,OACIL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKkB,GAAG,OAAOjB,UAAU,QACrBH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SAAOkB,GAAG,OAAOjB,UAAU,QAASkB,KAAK,OAAOC,YAAY,kBAAkBC,UAAQ,IACtFvB,EAAAC,EAAAC,cAAA,SAAOkB,GAAG,OAAOjB,UAAU,QAAQkB,KAAK,WAAWC,YAAY,iBAAiBC,UAAQ,IACxFvB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QAAQqB,QAAS5B,KAAK6B,cAAxC,UAEJzB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAlB,sBAEJH,EAAAC,EAAAC,cAAA,OAAKkB,GAAG,kBACRpB,EAAAC,EAAAC,cAACW,EAAD,CACAT,KAAK,GACLC,SAAS,aA7BEC,cCUJoB,0LARX,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyB,EAAD,cAJUrB,cCQEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAAS1B,SAASC,eAAe,SD2H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3c421f94.chunk.js","sourcesContent":["import React,{Component} from \"react\";\r\n\r\nclass Card extends Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"card\">\r\n                    <h2>{this.props.name}</h2>\r\n                    <p>{this.props.password}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Card;","import React,{Component} from \"react\";\r\nimport Card from \"./Card\";\r\nimport './Form.css'\r\n\r\nclass Form extends Component{\r\n    printDetails(){\r\n        let inp1=document.getElementById('inp1');\r\n        let inp2 = document.getElementById('inp2');\r\n        let card =<Card\r\n        name={inp1.value}\r\n        password ={inp2.value}/>\r\n        let form = document.getElementById('cardcontainer');\r\n        console.log(card);\r\n        form.innerHTML = `<p>name: ${card.props.name} <br>\r\n        password: ${card.props.password}</p>`;\r\n        // this.Card.name = inp1.value;\r\n        // this.Card.password = inp2.value;\r\n    }\r\nrender(){\r\n    return(\r\n        <div>\r\n        <div id=\"form\" className=\"form\">\r\n            <h1>Login Form</h1>\r\n            <input id=\"inp1\" className=\"input\"  type=\"text\" placeholder=\"Enter User Name\" required/>\r\n            <input id=\"inp2\" className=\"input\" type=\"password\" placeholder=\"Enter password\" required/>\r\n            <div>\r\n                <button className=\"login\" onClick={this.printDetails}>Login</button>\r\n            </div>\r\n            <button className=\"forget\">Forget Passwprd ?</button>\r\n        </div>\r\n        <div id=\"cardcontainer\"></div>\r\n        <Card \r\n        name=\"\"\r\n        password=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport Form from './Form.js';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Form/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}